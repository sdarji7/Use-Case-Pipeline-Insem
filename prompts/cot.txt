Given the following system description: {system_description}, generate a comprehensive set of user stories that capture the functional and non-functional requirements from the perspective of all primary and secondary actors.

Step-by-Step Reasoning Before Generating User Stories

1. Identify Actors:  
   - Determine all primary actors (direct users of the system).  
   - Identify all secondary actors (external systems, APIs, or background processes).  

2. Understand User Goals & Interactions:  
   - Define the key tasks that each actor needs to perform.  
   - Consider both functional (feature-related) and non-functional (performance, security, usability) goals.  

3. Break Down the System's Functionalities:  
   - Map out user flows and identify critical interactions.  
   - Ensure coverage of typical use cases, error handling, and security constraints.  

4. Generate User Stories Using the "Front of the Card" Format:  
   - Title: A concise name summarizing the user story.  
   - As a [Primary or Secondary Actor],  
   - I want to [Desired Action],  
   - So that [Benefit or Outcome].  

5. Define "Back of the Card" Details (Success & Failure Scenarios):

   Success Scenarios (Acceptance Criteria):

      - Specify the expected behavior when the user story executes correctly.

      - Define how the system should validate and process the request.

      - Confirm any output/response messages or notifications that the user should receive.

   Failure Scenarios (Edge Cases & Error Handling):

      - Consider invalid inputs, insufficient data, or unexpected actions.

      - Specify how the system should gracefully handle errors and display appropriate messages.

      - Include security concerns like fraud detection, unauthorized access, and system downtime handling. 

6. Validate & Iterate:  
   - Ensure each actorâ€™s perspective is fully captured.  
   - Verify that both functional and non-functional requirements are covered.  
   - Address missing dependencies between user stories.  

Ensure That:
1. Each user story accounts for different actors involved in the system.
2. Both functional (features, actions) and non-functional (performance, security, accessibility) aspects are covered.
3. Dependencies between user stories are noted where applicable.
4. The user stories are written in clear, concise language suitable for Agile development.


---

Your Task:  
Generate comprehensive set of user stories for the {system_description}, following the structured step-by-step approach above.

